Loading modules.
Running job.
Command Line Args: Namespace(config_file='../configs/prima/fast_rcnn_R_50_FPN_3x.yaml', resume=False, eval_only=False, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:61904', opts=['OUTPUT_DIR', '../outputs/cards-v2/fast_rcnn_R_50_FPN_3x/', 'SOLVER.IMS_PER_BATCH', '2'], dataset_name='card-item', json_annotation_train='../data/cards-v2/train.json', image_path_train='../data/cards-v2/', json_annotation_val='../data/cards-v2/test.json', image_path_val='../data/cards-v2/')
[32m[06/10 10:46:00 detectron2]: [0mRank of current process: 0. World size: 1
[32m[06/10 10:46:01 detectron2]: [0mEnvironment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.7 (default, Sep 23 2021, 11:25:53) [GCC 8.2.0]
numpy                   1.22.2
detectron2              0.6 @/home/slafia/layout_parser/lib/python3.9/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 11.3
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5, 8.0, 8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.2+cu113 @/sw/arcts/centos7/python/3.9.7/pytorch/1.10.2/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA A40 (arch=8.6)
Driver version          495.44
CUDA_HOME               /sw/arcts/centos7/cuda/11.3.0
Pillow                  9.0.1
torchvision             0.11.3+cu113 @/sw/arcts/centos7/python/3.9.7/pytorch/1.10.2/lib/python3.9/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/10 10:46:01 detectron2]: [0mCommand line arguments: Namespace(config_file='../configs/prima/fast_rcnn_R_50_FPN_3x.yaml', resume=False, eval_only=False, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:61904', opts=['OUTPUT_DIR', '../outputs/cards-v2/fast_rcnn_R_50_FPN_3x/', 'SOLVER.IMS_PER_BATCH', '2'], dataset_name='card-item', json_annotation_train='../data/cards-v2/train.json', image_path_train='../data/cards-v2/', json_annotation_val='../data/cards-v2/test.json', image_path_val='../data/cards-v2/')
[32m[06/10 10:46:01 detectron2]: [0mContents of args.config_file=../configs/prima/fast_rcnn_R_50_FPN_3x.yaml:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST: []
  TRAIN: []
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS:
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS:
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20000
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 60000
  MOMENTUM: 0.9
  STEPS:
  - 210000
  - 250000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[32m[06/10 10:46:01 detectron2]: [0mRunning with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - card-item-val
  TRAIN:
  - card-item-train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS:
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 1
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ../outputs/cards-v2/fast_rcnn_R_50_FPN_3x/
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 60000
  MOMENTUM: 0.9
  NESTEROV: false
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 210000
  - 250000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[32m[06/10 10:46:01 detectron2]: [0mFull config saved to ../outputs/cards-v2/fast_rcnn_R_50_FPN_3x/config.yaml
[32m[06/10 10:46:01 d2.utils.env]: [0mUsing a generated random seed 1645565
[32m[06/10 10:46:07 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[32m[06/10 10:46:07 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip(), RandomRotation(angle=[-90.0, 0.0])]
[5m[31mWARNING[0m [32m[06/10 10:46:07 d2.data.datasets.coco]: [0m
Category ids in annotations are not in [1, #categories]! We'll apply a mapping for you.

[32m[06/10 10:46:07 d2.data.datasets.coco]: [0mLoaded 40 images in COCO format from ../data/cards-v2/train.json
[32m[06/10 10:46:07 d2.data.build]: [0mRemoved 0 images with no usable annotations. 40 images left.
[32m[06/10 10:46:07 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|  CardItem  | 231          |
|            |              |[0m
[32m[06/10 10:46:07 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[06/10 10:46:07 d2.data.common]: [0mSerializing 40 elements to byte tensors and concatenating them all ...
[32m[06/10 10:46:07 d2.data.common]: [0mSerialized dataset takes 0.02 MiB
[5m[31mWARNING[0m [32m[06/10 10:46:07 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[06/10 10:46:08 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from detectron2://ImageNetPretrained/MSRA/R-50.pkl ...
[32m[06/10 10:46:08 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[06/10 10:46:08 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[5m[31mWARNING[0m [32m[06/10 10:46:08 fvcore.common.checkpoint]: [0mSome model parameters or buffers are not found in the checkpoint:
[34mbackbone.fpn_lateral2.{bias, weight}[0m
[34mbackbone.fpn_lateral3.{bias, weight}[0m
[34mbackbone.fpn_lateral4.{bias, weight}[0m
[34mbackbone.fpn_lateral5.{bias, weight}[0m
[34mbackbone.fpn_output2.{bias, weight}[0m
[34mbackbone.fpn_output3.{bias, weight}[0m
[34mbackbone.fpn_output4.{bias, weight}[0m
[34mbackbone.fpn_output5.{bias, weight}[0m
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_head.fc1.{bias, weight}[0m
[34mroi_heads.box_head.fc2.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[5m[31mWARNING[0m [32m[06/10 10:46:08 fvcore.common.checkpoint]: [0mThe checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
  [35mstem.conv1.bias[0m
[32m[06/10 10:46:08 d2.engine.train_loop]: [0mStarting training from iteration 0
/home/slafia/layout_parser/lib/python3.9/site-packages/detectron2/structures/image_list.py:88: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  max_size = (max_size + (stride - 1)) // stride * stride
/sw/arcts/centos7/python/3.9.7/pytorch/1.10.2/lib/python3.9/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/10 10:46:14 d2.utils.events]: [0m eta: 4:19:01  iter: 19  total_loss: 0.9185  loss_cls: 0.1023  loss_box_reg: 0.01116  loss_rpn_cls: 0.6526  loss_rpn_loc: 0.08117  time: 0.2607  data_time: 0.0339  lr: 0.00039962  max_mem: 5291M
[32m[06/10 10:46:19 d2.utils.events]: [0m eta: 4:29:46  iter: 39  total_loss: 0.6777  loss_cls: 0.1842  loss_box_reg: 0.11  loss_rpn_cls: 0.2787  loss_rpn_loc: 0.06515  time: 0.2683  data_time: 0.0044  lr: 0.00079922  max_mem: 5389M
[32m[06/10 10:46:25 d2.utils.events]: [0m eta: 4:29:41  iter: 59  total_loss: 0.6734  loss_cls: 0.2251  loss_box_reg: 0.2592  loss_rpn_cls: 0.1281  loss_rpn_loc: 0.05838  time: 0.2667  data_time: 0.0041  lr: 0.0011988  max_mem: 5389M
[32m[06/10 10:46:30 d2.utils.events]: [0m eta: 4:31:37  iter: 79  total_loss: 0.6691  loss_cls: 0.2079  loss_box_reg: 0.2689  loss_rpn_cls: 0.09342  loss_rpn_loc: 0.05378  time: 0.2693  data_time: 0.0045  lr: 0.0015984  max_mem: 5389M
[32m[06/10 10:46:36 d2.utils.events]: [0m eta: 4:31:31  iter: 99  total_loss: 0.5691  loss_cls: 0.1667  loss_box_reg: 0.2414  loss_rpn_cls: 0.0664  loss_rpn_loc: 0.0728  time: 0.2703  data_time: 0.0041  lr: 0.001998  max_mem: 5389M
[32m[06/10 10:46:41 d2.utils.events]: [0m eta: 4:30:52  iter: 119  total_loss: 0.5879  loss_cls: 0.1541  loss_box_reg: 0.2937  loss_rpn_cls: 0.04763  loss_rpn_loc: 0.06421  time: 0.2685  data_time: 0.0040  lr: 0.0023976  max_mem: 5389M
[32m[06/10 10:46:46 d2.utils.events]: [0m eta: 4:27:55  iter: 139  total_loss: 0.6142  loss_cls: 0.1824  loss_box_reg: 0.2752  loss_rpn_cls: 0.0441  loss_rpn_loc: 0.07767  time: 0.2667  data_time: 0.0038  lr: 0.0027972  max_mem: 5389M
[32m[06/10 10:46:51 d2.utils.events]: [0m eta: 4:25:14  iter: 159  total_loss: 0.6168  loss_cls: 0.1881  loss_box_reg: 0.3156  loss_rpn_cls: 0.02961  loss_rpn_loc: 0.06243  time: 0.2667  data_time: 0.0038  lr: 0.0031968  max_mem: 5389M
[32m[06/10 10:46:57 d2.utils.events]: [0m eta: 4:26:23  iter: 179  total_loss: 0.5456  loss_cls: 0.161  loss_box_reg: 0.2408  loss_rpn_cls: 0.02904  loss_rpn_loc: 0.09459  time: 0.2677  data_time: 0.0038  lr: 0.0035964  max_mem: 5389M
[32m[06/10 10:47:02 d2.utils.events]: [0m eta: 4:26:18  iter: 199  total_loss: 0.5689  loss_cls: 0.1688  loss_box_reg: 0.2716  loss_rpn_cls: 0.03189  loss_rpn_loc: 0.06409  time: 0.2669  data_time: 0.0038  lr: 0.003996  max_mem: 5494M
[32m[06/10 10:47:07 d2.utils.events]: [0m eta: 4:24:07  iter: 219  total_loss: 0.5594  loss_cls: 0.1747  loss_box_reg: 0.2621  loss_rpn_cls: 0.0278  loss_rpn_loc: 0.06389  time: 0.2658  data_time: 0.0037  lr: 0.0043956  max_mem: 5494M
[32m[06/10 10:47:13 d2.utils.events]: [0m eta: 4:24:45  iter: 239  total_loss: 0.5075  loss_cls: 0.1493  loss_box_reg: 0.2643  loss_rpn_cls: 0.01771  loss_rpn_loc: 0.07277  time: 0.2669  data_time: 0.0038  lr: 0.0047952  max_mem: 5494M
[32m[06/10 10:47:18 d2.utils.events]: [0m eta: 4:26:31  iter: 259  total_loss: 0.4961  loss_cls: 0.152  loss_box_reg: 0.2784  loss_rpn_cls: 0.01922  loss_rpn_loc: 0.05216  time: 0.2673  data_time: 0.0040  lr: 0.0051948  max_mem: 5494M
[32m[06/10 10:47:24 d2.utils.events]: [0m eta: 4:27:42  iter: 279  total_loss: 0.5532  loss_cls: 0.1595  loss_box_reg: 0.2959  loss_rpn_cls: 0.01634  loss_rpn_loc: 0.04725  time: 0.2678  data_time: 0.0044  lr: 0.0055944  max_mem: 5494M
[32m[06/10 10:47:29 d2.utils.events]: [0m eta: 4:27:02  iter: 299  total_loss: 0.4699  loss_cls: 0.128  loss_box_reg: 0.2558  loss_rpn_cls: 0.01861  loss_rpn_loc: 0.06566  time: 0.2673  data_time: 0.0038  lr: 0.005994  max_mem: 5494M
[32m[06/10 10:47:34 d2.utils.events]: [0m eta: 4:27:09  iter: 319  total_loss: 0.4741  loss_cls: 0.1275  loss_box_reg: 0.256  loss_rpn_cls: 0.012  loss_rpn_loc: 0.05349  time: 0.2673  data_time: 0.0038  lr: 0.0063936  max_mem: 5494M
[32m[06/10 10:47:40 d2.utils.events]: [0m eta: 4:27:03  iter: 339  total_loss: 0.4848  loss_cls: 0.1317  loss_box_reg: 0.2623  loss_rpn_cls: 0.01671  loss_rpn_loc: 0.05076  time: 0.2673  data_time: 0.0038  lr: 0.0067932  max_mem: 5494M
[32m[06/10 10:47:45 d2.utils.events]: [0m eta: 4:27:39  iter: 359  total_loss: 0.4945  loss_cls: 0.1423  loss_box_reg: 0.2725  loss_rpn_cls: 0.01538  loss_rpn_loc: 0.05359  time: 0.2684  data_time: 0.0040  lr: 0.0071928  max_mem: 5494M
[32m[06/10 10:47:51 d2.utils.events]: [0m eta: 4:27:34  iter: 379  total_loss: 0.47  loss_cls: 0.1345  loss_box_reg: 0.2454  loss_rpn_cls: 0.01682  loss_rpn_loc: 0.05031  time: 0.2687  data_time: 0.0042  lr: 0.0075924  max_mem: 5494M
[32m[06/10 10:47:56 d2.utils.events]: [0m eta: 4:26:59  iter: 399  total_loss: 0.4737  loss_cls: 0.1298  loss_box_reg: 0.2317  loss_rpn_cls: 0.01548  loss_rpn_loc: 0.06733  time: 0.2684  data_time: 0.0039  lr: 0.007992  max_mem: 5494M
[32m[06/10 10:48:01 d2.utils.events]: [0m eta: 4:26:42  iter: 419  total_loss: 0.4098  loss_cls: 0.1013  loss_box_reg: 0.202  loss_rpn_cls: 0.01911  loss_rpn_loc: 0.06133  time: 0.2675  data_time: 0.0038  lr: 0.0083916  max_mem: 5494M
[32m[06/10 10:48:07 d2.utils.events]: [0m eta: 4:26:59  iter: 439  total_loss: 0.4407  loss_cls: 0.1283  loss_box_reg: 0.231  loss_rpn_cls: 0.01351  loss_rpn_loc: 0.05378  time: 0.2682  data_time: 0.0043  lr: 0.0087912  max_mem: 5494M
[32m[06/10 10:48:12 d2.utils.events]: [0m eta: 4:27:06  iter: 459  total_loss: 0.5264  loss_cls: 0.1483  loss_box_reg: 0.2884  loss_rpn_cls: 0.01426  loss_rpn_loc: 0.05117  time: 0.2680  data_time: 0.0040  lr: 0.0091908  max_mem: 5494M
[32m[06/10 10:48:17 d2.utils.events]: [0m eta: 4:26:51  iter: 479  total_loss: 0.5083  loss_cls: 0.1205  loss_box_reg: 0.2619  loss_rpn_cls: 0.01434  loss_rpn_loc: 0.06239  time: 0.2679  data_time: 0.0040  lr: 0.0095904  max_mem: 5494M
[32m[06/10 10:48:23 d2.utils.events]: [0m eta: 4:26:45  iter: 499  total_loss: 0.4429  loss_cls: 0.1205  loss_box_reg: 0.2549  loss_rpn_cls: 0.01044  loss_rpn_loc: 0.04633  time: 0.2679  data_time: 0.0041  lr: 0.00999  max_mem: 5494M
[32m[06/10 10:48:28 d2.utils.events]: [0m eta: 4:26:49  iter: 519  total_loss: 0.4243  loss_cls: 0.1229  loss_box_reg: 0.2472  loss_rpn_cls: 0.01088  loss_rpn_loc: 0.04141  time: 0.2678  data_time: 0.0053  lr: 0.01039  max_mem: 5494M
[32m[06/10 10:48:33 d2.utils.events]: [0m eta: 4:26:53  iter: 539  total_loss: 0.419  loss_cls: 0.1084  loss_box_reg: 0.2344  loss_rpn_cls: 0.01142  loss_rpn_loc: 0.0645  time: 0.2679  data_time: 0.0045  lr: 0.010789  max_mem: 5494M
[32m[06/10 10:48:39 d2.utils.events]: [0m eta: 4:26:39  iter: 559  total_loss: 0.4114  loss_cls: 0.1078  loss_box_reg: 0.2366  loss_rpn_cls: 0.01161  loss_rpn_loc: 0.04347  time: 0.2681  data_time: 0.0040  lr: 0.011189  max_mem: 5494M
[32m[06/10 10:48:44 d2.utils.events]: [0m eta: 4:26:38  iter: 579  total_loss: 0.4102  loss_cls: 0.1176  loss_box_reg: 0.2465  loss_rpn_cls: 0.0135  loss_rpn_loc: 0.04025  time: 0.2681  data_time: 0.0040  lr: 0.011588  max_mem: 5494M
[32m[06/10 10:48:50 d2.utils.events]: [0m eta: 4:26:28  iter: 599  total_loss: 0.4138  loss_cls: 0.09807  loss_box_reg: 0.2054  loss_rpn_cls: 0.01192  loss_rpn_loc: 0.05343  time: 0.2680  data_time: 0.0039  lr: 0.011988  max_mem: 5494M
[32m[06/10 10:48:55 d2.utils.events]: [0m eta: 4:26:03  iter: 619  total_loss: 0.3729  loss_cls: 0.1004  loss_box_reg: 0.187  loss_rpn_cls: 0.02311  loss_rpn_loc: 0.06392  time: 0.2678  data_time: 0.0044  lr: 0.012388  max_mem: 5494M
[32m[06/10 10:49:01 d2.utils.events]: [0m eta: 4:26:27  iter: 639  total_loss: 0.3496  loss_cls: 0.08893  loss_box_reg: 0.2033  loss_rpn_cls: 0.01004  loss_rpn_loc: 0.04442  time: 0.2683  data_time: 0.0048  lr: 0.012787  max_mem: 5494M
[32m[06/10 10:49:06 d2.utils.events]: [0m eta: 4:26:16  iter: 659  total_loss: 0.3584  loss_cls: 0.08907  loss_box_reg: 0.1853  loss_rpn_cls: 0.01166  loss_rpn_loc: 0.05121  time: 0.2681  data_time: 0.0043  lr: 0.013187  max_mem: 5494M
[32m[06/10 10:49:11 d2.utils.events]: [0m eta: 4:26:11  iter: 679  total_loss: 0.4067  loss_cls: 0.09826  loss_box_reg: 0.203  loss_rpn_cls: 0.01569  loss_rpn_loc: 0.04753  time: 0.2684  data_time: 0.0045  lr: 0.013586  max_mem: 5494M
[32m[06/10 10:49:17 d2.utils.events]: [0m eta: 4:26:17  iter: 699  total_loss: 0.3957  loss_cls: 0.1109  loss_box_reg: 0.2124  loss_rpn_cls: 0.01466  loss_rpn_loc: 0.04094  time: 0.2686  data_time: 0.0050  lr: 0.013986  max_mem: 5494M
[32m[06/10 10:49:22 d2.utils.events]: [0m eta: 4:26:19  iter: 719  total_loss: 0.3532  loss_cls: 0.08172  loss_box_reg: 0.1851  loss_rpn_cls: 0.01551  loss_rpn_loc: 0.05517  time: 0.2689  data_time: 0.0041  lr: 0.014386  max_mem: 5494M
[32m[06/10 10:49:28 d2.utils.events]: [0m eta: 4:26:21  iter: 739  total_loss: 0.3492  loss_cls: 0.08222  loss_box_reg: 0.1857  loss_rpn_cls: 0.01381  loss_rpn_loc: 0.06306  time: 0.2692  data_time: 0.0043  lr: 0.014785  max_mem: 5494M
[32m[06/10 10:49:34 d2.utils.events]: [0m eta: 4:26:38  iter: 759  total_loss: 0.3625  loss_cls: 0.09266  loss_box_reg: 0.2002  loss_rpn_cls: 0.01106  loss_rpn_loc: 0.05554  time: 0.2697  data_time: 0.0044  lr: 0.015185  max_mem: 5494M
[32m[06/10 10:49:39 d2.utils.events]: [0m eta: 4:26:33  iter: 779  total_loss: 0.3189  loss_cls: 0.0839  loss_box_reg: 0.178  loss_rpn_cls: 0.0104  loss_rpn_loc: 0.05002  time: 0.2698  data_time: 0.0041  lr: 0.015584  max_mem: 5494M
[32m[06/10 10:49:45 d2.utils.events]: [0m eta: 4:26:54  iter: 799  total_loss: 0.3417  loss_cls: 0.08263  loss_box_reg: 0.2215  loss_rpn_cls: 0.006827  loss_rpn_loc: 0.04394  time: 0.2702  data_time: 0.0043  lr: 0.015984  max_mem: 5494M
[32m[06/10 10:49:51 d2.utils.events]: [0m eta: 4:28:10  iter: 819  total_loss: 0.3599  loss_cls: 0.08634  loss_box_reg: 0.2214  loss_rpn_cls: 0.01044  loss_rpn_loc: 0.04122  time: 0.2706  data_time: 0.0042  lr: 0.016384  max_mem: 5494M
[32m[06/10 10:49:57 d2.utils.events]: [0m eta: 4:28:19  iter: 839  total_loss: 0.3862  loss_cls: 0.09492  loss_box_reg: 0.246  loss_rpn_cls: 0.01057  loss_rpn_loc: 0.03315  time: 0.2709  data_time: 0.0041  lr: 0.016783  max_mem: 5494M
[32m[06/10 10:50:02 d2.utils.events]: [0m eta: 4:28:14  iter: 859  total_loss: 0.3734  loss_cls: 0.09433  loss_box_reg: 0.2278  loss_rpn_cls: 0.009852  loss_rpn_loc: 0.03736  time: 0.2710  data_time: 0.0039  lr: 0.017183  max_mem: 5494M
[32m[06/10 10:50:08 d2.utils.events]: [0m eta: 4:28:18  iter: 879  total_loss: 0.3715  loss_cls: 0.09503  loss_box_reg: 0.1966  loss_rpn_cls: 0.01355  loss_rpn_loc: 0.05652  time: 0.2712  data_time: 0.0039  lr: 0.017582  max_mem: 5494M
[32m[06/10 10:50:13 d2.utils.events]: [0m eta: 4:28:09  iter: 899  total_loss: 0.3667  loss_cls: 0.09779  loss_box_reg: 0.2152  loss_rpn_cls: 0.01046  loss_rpn_loc: 0.04973  time: 0.2713  data_time: 0.0038  lr: 0.017982  max_mem: 5494M
[32m[06/10 10:50:19 d2.utils.events]: [0m eta: 4:28:24  iter: 919  total_loss: 0.3882  loss_cls: 0.09374  loss_box_reg: 0.2256  loss_rpn_cls: 0.0106  loss_rpn_loc: 0.05438  time: 0.2716  data_time: 0.0039  lr: 0.018382  max_mem: 5494M
[32m[06/10 10:50:24 d2.utils.events]: [0m eta: 4:28:31  iter: 939  total_loss: 0.3475  loss_cls: 0.08028  loss_box_reg: 0.1989  loss_rpn_cls: 0.01117  loss_rpn_loc: 0.05048  time: 0.2717  data_time: 0.0039  lr: 0.018781  max_mem: 5494M
[32m[06/10 10:50:30 d2.utils.events]: [0m eta: 4:28:32  iter: 959  total_loss: 0.3665  loss_cls: 0.084  loss_box_reg: 0.2042  loss_rpn_cls: 0.008375  loss_rpn_loc: 0.04255  time: 0.2721  data_time: 0.0039  lr: 0.019181  max_mem: 5599M
[32m[06/10 10:50:36 d2.utils.events]: [0m eta: 4:28:25  iter: 979  total_loss: 0.3726  loss_cls: 0.08644  loss_box_reg: 0.2207  loss_rpn_cls: 0.005641  loss_rpn_loc: 0.03995  time: 0.2721  data_time: 0.0038  lr: 0.01958  max_mem: 5599M
[32m[06/10 10:50:41 d2.utils.events]: [0m eta: 4:28:26  iter: 999  total_loss: 0.3992  loss_cls: 0.09302  loss_box_reg: 0.2293  loss_rpn_cls: 0.008079  loss_rpn_loc: 0.03917  time: 0.2724  data_time: 0.0040  lr: 0.01998  max_mem: 5599M
[32m[06/10 10:50:47 d2.utils.events]: [0m eta: 4:28:29  iter: 1019  total_loss: 0.3989  loss_cls: 0.09666  loss_box_reg: 0.2363  loss_rpn_cls: 0.009096  loss_rpn_loc: 0.04894  time: 0.2723  data_time: 0.0038  lr: 0.02  max_mem: 5599M
[32m[06/10 10:50:52 d2.utils.events]: [0m eta: 4:28:19  iter: 1039  total_loss: 0.3717  loss_cls: 0.08757  loss_box_reg: 0.2182  loss_rpn_cls: 0.007025  loss_rpn_loc: 0.03858  time: 0.2723  data_time: 0.0039  lr: 0.02  max_mem: 5599M
[32m[06/10 10:50:58 d2.utils.events]: [0m eta: 4:28:18  iter: 1059  total_loss: 0.3526  loss_cls: 0.0832  loss_box_reg: 0.202  loss_rpn_cls: 0.006914  loss_rpn_loc: 0.04406  time: 0.2725  data_time: 0.0039  lr: 0.02  max_mem: 5599M
[32m[06/10 10:51:03 d2.utils.events]: [0m eta: 4:28:08  iter: 1079  total_loss: 0.3893  loss_cls: 0.09669  loss_box_reg: 0.2363  loss_rpn_cls: 0.008151  loss_rpn_loc: 0.03644  time: 0.2724  data_time: 0.0038  lr: 0.02  max_mem: 5599M
[32m[06/10 10:51:09 d2.utils.events]: [0m eta: 4:28:03  iter: 1099  total_loss: 0.3623  loss_cls: 0.08246  loss_box_reg: 0.2157  loss_rpn_cls: 0.006874  loss_rpn_loc: 0.04156  time: 0.2724  data_time: 0.0038  lr: 0.02  max_mem: 5599M
